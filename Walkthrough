(1) Canu

(We only have less than 20 coverage of the estimated genome size of coral PacBio reads, Canu is recommended to do the assembling after we tried with Falcon, minimap2/rancon pipleline and Canu)

Reference: Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. Genome Research. (2017)

1. Install:
git clone https://github.com/marbl/canu.git
cd canu/src
make -j 4
(Note: Sometimes the installing process seems can not be finished smoothly in TACC (your own directory), please try one more time, in my experience, this failure of installing may just because a busy time of the system or out of space in some necessary files. 

2. Run:
Please Note: Canu depend on perl 5.12 or higher, make sure which version of perl installed in your own directory. TACC has perl module with version 5.22, it seems to be compatible. 
So, if you encounter an error reporting for "File::Path 2.08 is required", you just need to enter the command "module load perl".

/work/05158/yiliao/lonestar/bin/canu/Linux-amd64/bin/canu useGrid=remote -p MC -d coral genomeSize=500m correctedErrorRate=0.105 -pacbio-raw /work/05158/yiliao/lonestar/db/GDS1_filtered_subreads_combined.fastq
(cat the above command to canu)

launcher_creator.py -n canu -j canu -a tagmap -q largemem512GB -t 24:00:00 -e yiliao1022@gmail.com
sbatch canu.slurm (Note: You need to manually edit the time set to be 48:00:00, it seems the laucher_creator.py have something wrong with set time to 48:00:00)

Please especially note that: Generally, the above command will finish all steps (correction,trimming and assembling)launched by Canu and get the finished contigs. 
However,TACC has a limitation of maximumal runing time (48 hours) for each job, in my experience, the correction step with our current PacBio reads (~15Gb) need (less) 48 hours to process.
So,the above command will be canceled after it finished the correstion step (this is so lucky). To continue the assembling process, you need to submit another job. 

cd coral;
/work/05158/yiliao/lonestar/bin/canu/Linux-amd64/bin/canu useGrid=remote -p MC -d coral genomeSize=500m -pacbio-corrected coral/MC.correctedReads.fasta.gz
(cat the above command to canu_trim)
launcher_creator.py -n canu_trim -j canu_trim -a tagmap -q largemem512GB -t 24:00:00 -e yiliao1022@gmail.com
sbatch canu_trim.slurm
(This will continue the assembling process which have been terminated after the first step, you may need to manually remove the files that the first step have been generated for the trimming process).
This step needs about 24 hours for our data.  

The final assembly files are loaded at the coral directory: MC.contigs.fasta

iTools Fatools -stat -InPut MC.contigs.fasta -OutPut MC.contigs.fasta.stat -N50Stat (Calculate the assembly information, iTools is a toolkits i usually use for deal with next generation data and fasta and fastq files)

#NX	Scaffold_Length(bp)	Scaffold_Number(%)	ConTig_Length(bp)	ConTig_Number(%)
N10	64651	630(2.09%)	64651	630(2.09%)
N20	46831	1600(5.30%)	46831	1600(5.30%)
N30	35732	2896(9.59%)	35732	2896(9.59%)
N40	28122	4560(15.10%)	28122	4560(15.10%)
N50	22246	6663(22.07%)	22246	6663(22.07%)
N60	17676	9322(30.87%)	17676	9322(30.87%)
N70	14062	12661(41.93%)	14062	12661(41.93%)
N80	11111	16868(55.86%)	11111	16868(55.86%)
N90	8570	22243(73.66%)	8570	22243(73.66%)



(2) Scaff10X 

1. Install: 
wget https://sourceforge.net/projects/phusion2/files/scaff10x/scaff10x-v1.1.tar.gz
gunzip scaff10x-v1.1.tar.gz 
tar xvf scaff10x-v1.1.tar
make 
(If you want to execute the commands of scaff10x in your current path, you can put "export PATH=$PATH:/your/custom/path/for/scaff10X" in .bashrc file, otherwise you need to provide the full path everytime when you use it.)

2. Barcode extraction: (We have four pairs of 10X genomic data)
/home1/05158/yiliao/scaff10x/scaff_BC-reads-1 XOQT494-MC-1-AGTTCGGC_S7_L003_R1_001.fastq XOQT494-MC-1-AGTTCGGC_S7_L003_RC1_001.fastq XOQT494-MC-1-AGTTCGGC_S7_L003_BC_001.name > try1.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-1 XOQT494-MC-1-CAGCATCA_S8_L003_R1_001.fastq XOQT494-MC-1-CAGCATCA_S8_L003_RC1_001.fastq XOQT494-MC-1-CAGCATCA_S8_L003_BC_001.name > try2.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-1 XOQT494-MC-1-GTAATCTT_S5_L003_R1_001.fastq XOQT494-MC-1-GTAATCTT_S5_L003_RC1_001.fastq XOQT494-MC-1-GTAATCTT_S5_L003_BC_001.name > try3.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-1 XOQT494-MC-1-TCCGGAAG_S6_L003_R1_001.fastq XOQT494-MC-1-TCCGGAAG_S6_L003_RC1_001.fastq XOQT494-MC-1-TCCGGAAG_S6_L003_BC_001.name > try4.out

(Cat the above commands to Barcode_reads1)
launcher_creator.py -n Barcode_reads1 -j Barcode_reads1 -q normal -a tagmap -w 4 -t 24:00:00 -e yiliao1022@gmail.com
sbatch Barcode_reads1.slurm

/home1/05158/yiliao/scaff10x/scaff_BC-reads-2 XOQT494-MC-1-AGTTCGGC_S7_L003_BC_001.name XOQT494-MC-1-AGTTCGGC_S7_L003_R2_001.fastq XOQT494-MC-1-AGTTCGGC_S7_L003_RC2_001.fastq > try1.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-2 XOQT494-MC-1-CAGCATCA_S8_L003_BC_001.name XOQT494-MC-1-CAGCATCA_S8_L003_R2_001.fastq XOQT494-MC-1-CAGCATCA_S8_L003_RC2_001.fastq > try2.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-2 XOQT494-MC-1-GTAATCTT_S5_L003_BC_001.name XOQT494-MC-1-GTAATCTT_S5_L003_R2_001.fastq XOQT494-MC-1-GTAATCTT_S5_L003_RC2_001.fastq > try3.out
/home1/05158/yiliao/scaff10x/scaff_BC-reads-2 XOQT494-MC-1-TCCGGAAG_S6_L003_BC_001.name XOQT494-MC-1-TCCGGAAG_S6_L003_R2_001.fastq XOQT494-MC-1-TCCGGAAG_S6_L003_RC2_001.fastq > try4.out

(Cat the above commands to Barcode_reads2)
launcher_creator.py -n Barcode_reads2 -j Barcode_reads2 -q normal -a tagmap -w 4 -t 24:00:00 -e yiliao1022@gmail.com
sbatch Barcode_reads2.slurm

cat *RC1_001.fastq > read-BC_1.fastq
cat *RC2_001.fastq > read-BC_2.fastq

3. Run scaff10x:

(A soft link of canu assembly to the current directory)
ln -s /where/your/canu/result/assembly/path/MC.contigs.fasta MC.contigs.fasta
/home1/05158/yiliao/scaff10x_2/scaff10x -nodes 60 -matrix 2000 -reads 8 -score 20 -longread 0 -edge 50000 -link 6 -block 10000 -align smalt MC.contigs.fasta read-BC_1.fastq read-BC_2.fastq MC_canu_scaff10x_1_new_10000.fasta
(cat the above command into scaff10x)
launcher_creator.py -n scaff10x -j scaff10x -a tagmap -q largemem512GB -t 24:00:00 -e yiliao1022@gmail.com
sbatch scaff10x.slurm

#NX	Scaffold_Length(bp)	Scaffold_Number(%)	ConTig_Length(bp)	ConTig_Number(%)
N10	227915	175(0.83%)	64651	630(2.09%)
N20	159985	452(2.14%)	46831	1600(5.30%)
N30	119290	835(3.96%)	35732	2896(9.59%)
N40	87247	1351(6.41%)	28122	4560(15.10%)
N50	60849	2074(9.84%)	22246	6663(22.07%)
N60	38275	3158(14.98%)	17676	9322(30.87%)
N70	21157	5024(23.83%)	14062	12661(41.93%)
N80	12965	8298(39.35%)	11111	16868(55.86%)
N90	8955	13241(62.79%)	8570	22243(73.66%)


Run more time to get a better assembly
/home1/05158/yiliao/scaff10x_2/scaff10x -nodes 60 -matrix 2000 -reads 8 -score 20 -longread 0 -edge 50000 -link 6 -block 10000 -align smalt MC_canu_scaff10x_1_new_10000.fasta read-BC_1.fastq read-BC_2.fastq MC_canu_scaff10x_1_new_10000_10000.fasta

#NX	Scaffold_Length(bp)	Scaffold_Number(%)	ConTig_Length(bp)	ConTig_Number(%)
N10	512574	80(0.47%)	64651	630(2.09%)
N20	379505	200(1.18%)	46831	1600(5.30%)
N30	293600	358(2.12%)	35732	2896(9.59%)
N40	219103	567(3.36%)	28122	4560(15.10%)
N50	154285	856(5.07%)	22246	6663(22.07%)
N60	99613	1278(7.56%)	17676	9322(30.87%)
N70	41994	2070(12.25%)	14062	12661(41.93%)
N80	14689	4475(26.49%)	11111	16868(55.86%)
N90	9204	9125(54.01%)	8570	22243(73.66%)


(3) LINK/ARCS

Install ARCS

download boost_1_61_0.tar.bz2 from http://www.boost.org/users/history/version_1_61_0.html
tar -jxvf boost_1_61_0.tar.bz2
put it somewhere you like: /home1/05158/yiliao/arcs
git clone https://github.com/bcgsc/arcs.git
cd arcs
./autogen.sh
./configure â€“-with-boost=/boost/path (/home1/05158/yiliao/arcs/boost) --prefix=/ARCS/PATH && make install

Install LINK
git clone https://github.com/bcgsc/LINKS.git
tar -jxvf links_v1.8.5.tar.gz


1. Renumber your fraft / BWA index
ln -s /scratch/05158/yiliao/10X_Pacbio_combined/New/2_scaff10x/scaff10_2/MC_canu_scaff10x_1_new_10000_10000.fasta MC_canu_scaff10x_1_new_10000_10000.fasta
cat MC_canu_scaff10x_1_new_10000_10000.fasta | perl -ne 'chomp;if(/^\>/){$ct++;print ">$ct\n";}else{print "$_\n";}' > MC-renamed.fa
bwa index MC-renamed.fa (You may need to summit the job to the compution nodes)

2. Align / sort bam files (The fastq file can fortuntatly use read-BC_1.fastq and read-BC_2.fastq which geneated at the scaff10x step, so that you not need to rename the read names)
bwa mem -t 45 MC-renamed.fa /scratch/05158/yiliao/10X_Pacbio_combined/New/2_scaff10x/read-BC_1.fastq /scratch/05158/yiliao/10X_Pacbio_combined/New/2_scaff10x/read-BC_2.fastq > myresult.sam
samtools view -S -b myresult.sam > myresult.bam
samtools sort-n  myresult.bam -o myresult.sorted.bam (Note:alignments must be sorted in order of name)

3. Run ARCS and Links (https://github.com/bcgsc/arcs/blob/master/Examples/pipeline_example.sh)
arcs -f MC-renamed.fa -a myresult.sorted.bam -s 98 -c 5 -l 0 -d 0 -r 0.05 -e 30000 -m 20-10000 -v &> ARCSlog.txt
python ~/arcs/Examples/makeTSVfile.py MC-renamed.fa.scaff_s98_c5_l0_d0_e30000_r0.05_original.gv MC-renamed.fa.c5_l0_d0_e30000_r0.05.tigpair_checkpoint.tsv MC-renamed.fa
touch empty.fof
/home1/05158/yiliao/LINKS/links_v1.8.5/LINKS -f MC-renamed.fa -s empty.fof -k 20 -b MC-renamed.fa.c5_l0_d0_e30000_r0.05 -l 5 -t 2 -a 0.3

iTools Fatools stat -InPut MC-renamed.fa.c5_l0_d0_e30000_r0.05.scaffolds.fa -OutPut MC-renamed.fa.c5_l0_d0_e30000_r0.05.scaffolds.fa.stat -N50Stat

#NX	Scaffold_Length(bp)	Scaffold_Number(%)	ConTig_Length(bp)	ConTig_Number(%)
N10	686617	61(0.37%)	64651	630(2.09%)
N20	503522	152(0.93%)	46831	1600(5.30%)
N30	389083	271(1.66%)	35732	2896(9.59%)
N40	293600	427(2.61%)	28122	4560(15.10%)
N50	203173	641(3.91%)	22246	6663(22.07%)
N60	124759	969(5.92%)	17676	9322(30.87%)
N70	47736	1615(9.86%)	14062	12661(41.93%)
N80	14759	3959(24.18%)	11111	16868(55.86%)
N90	9208	8600(52.53%)	8570	22243(73.66%)

(4) SSPACE-longread (Using this set of scaffolds, went back to the pacbio data to see if those reads could be used to further scaffold.)




